{"version":3,"sources":["util/adder.js","components/InputBar/InputBar.js","components/OutputBar/OutputBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["adder","transferToArr","str","split","map","Number","func1","arr","newArr","filter","element","isNaN","length","min1","minNum","splice","indexOf","count","InputBar","props","state","term","formAnArray","bind","handleTermChange","inputData","this","changeAns","event","setState","target","value","placeholder","onChange","onClick","React","Component","OutputBar","ans","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAAMA,G,MAAQ,CAEbC,cAFa,SAECC,GACb,OAAOA,EAAIC,MAAM,KAAKC,IAAIC,SAG3BC,MANa,SAMPC,GACL,IAAIC,EAASD,EAAIE,OAAO,SAAAC,GAAO,MAAyB,kBAAbA,IAA2BL,OAAOM,MAAMD,KAEnF,GAAIF,EAAOI,OAAS,EACnB,MAAO,2kBAGR,IAAIC,EAAOb,EAAMc,OAAON,EAAQA,EAAOI,OAAQJ,EAAOA,EAAOI,OAAS,IAMtE,OAJAJ,EAAOO,OAAOR,EAAIS,QAAQH,GAAO,GAIzBA,EAFGb,EAAMc,OAAON,EAAQA,EAAOI,OAAQJ,EAAOA,EAAOI,OAAS,KAKvEE,OAtBa,SAsBNP,EAAKU,EAAOJ,GAElB,OAAII,EAAQ,EACJJ,GAEJN,EAAIU,GAASJ,IAChBA,EAAON,EAAIU,IAEZA,GAAS,EAEFjB,EAAMc,OAAOP,EAAKU,EAAOJ,OAKnBb,ICEAkB,E,YAlCd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACZC,KAAM,IAGP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARP,E,2EAYjB,IAAIE,EAAYC,KAAKN,MAAMC,KAEvBb,EAASR,EAAMC,cAAcwB,GAEjCC,KAAKP,MAAMQ,UAAU3B,EAAMM,MAAME,M,uCAGjBoB,GAChBF,KAAKG,SAAS,CAACR,KAAMO,EAAME,OAAOC,U,+BAKlC,OACC,6BACC,2BAAOC,YAAY,sJAA8BC,SAAUP,KAAKF,mBAChE,4BAAQU,QAASR,KAAKJ,aAAtB,gM,GA7BmBa,IAAMC,WCQdC,E,iLARb,OACC,6BACC,4BAAKX,KAAKP,MAAMmB,U,GAJIH,IAAMC,WCgCfG,E,YA3Bd,WAAYpB,GAAO,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACZkB,IAAK,GAGN,EAAKX,UAAY,EAAKA,UAAUJ,KAAf,gBAPA,E,uEAURe,GACTZ,KAAKG,SAAS,CAACS,IAAKA,M,+BAIlB,OACF,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cACnB,mmBACA,kBAAC,EAAD,CAAUb,UAAWD,KAAKC,YAC1B,kBAAC,EAAD,CAAWW,IAAKZ,KAAKN,MAAMkB,Y,GArBZH,IAAMC,WCMJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.3cba9d93.chunk.js","sourcesContent":["const adder = {\r\n\r\n\ttransferToArr(str) {\r\n\t\treturn str.split(\",\").map(Number); //получить массив чисел из строки\r\n\t},\r\n\r\n\tfunc1(arr) {\r\n\t\tlet newArr = arr.filter(element => (typeof element) === 'number' && !(Number.isNaN(element))); //рассматривае только числа\r\n\r\n\t\tif (newArr.length < 2) {\r\n\t\t\treturn \"Нельзя определить сумму двух наименьших чисел из массива т.к. в масиве не набирается чисел в количестве двух штук.\";\r\n\t\t}\r\n\r\n\t\tlet min1 = adder.minNum(newArr, newArr.length, newArr[newArr.length - 1]); //найти первое наименьшее\r\n\r\n\t\tnewArr.splice(arr.indexOf(min1), 1); //исключаем из рассматрения первое наименьшее исло\r\n\r\n\t\tlet min2 = adder.minNum(newArr, newArr.length, newArr[newArr.length - 1]); //найти второе наименьшее\r\n\r\n\t\treturn (min1 + min2); // вернуть сумму\r\n\t},\r\n\r\n\tminNum(arr, count, min1) {\r\n\t\t//функция для определения минимального числа в массиве, начинат с конца - если конечное число наименьшее то иго и вернет, иначепройдет по всем элементам массива\r\n\t\tif (count < 0) {\r\n\t\t\treturn min1;\r\n\t\t}\r\n\t\tif (arr[count] < min1) {\r\n\t\t\tmin1 = arr[count];\r\n\t\t}\r\n\t\tcount -= 1;\r\n\r\n\t\treturn adder.minNum(arr, count, min1);\r\n\t}\r\n\r\n}\r\n\r\nexport default adder;\r\n\r\n\r\n//Функция func1 - прошла проверку со следующими исходными массивами:\r\n\r\n//console.log(func1([1,2,-3,3,10,7,14,7,'sdf','-259',{nkvd: \"Анатолий\"}, []]));\r\n//console.log(func1([]));\r\n//console.log(func1([-259, 4729, 8392392348, 3]));","import React from 'react';\r\n\r\nimport adder from '../../util/adder'\r\n\r\nclass InputBar extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tterm: '',\r\n\t\t};\r\n\t\t\r\n\t\tthis.formAnArray = this.formAnArray.bind(this);\r\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\r\n\t}\r\n\t\r\n\tformAnArray(){\r\n\t\tlet inputData = this.state.term;\r\n\t\t\r\n\t\tlet newArr = adder.transferToArr(inputData);\r\n\t\t\r\n\t\tthis.props.changeAns(adder.func1(newArr));\r\n\t}\r\n\t\r\n\thandleTermChange(event){\r\n\t\tthis.setState({term: event.target.value});\r\n\t}\r\n\t\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<input placeholder='Введите числа через запятую' onChange={this.handleTermChange}></input>\r\n\t\t\t\t<button onClick={this.formAnArray}>Рассчитать сумму наименьших чисел</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InputBar;","import React from 'react';\r\n\r\nclass OutputBar extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h1>{this.props.ans}</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default OutputBar;","import React from 'react';\nimport './App.css';\n\nimport InputBar from '../InputBar/InputBar';\nimport OutputBar from '../OutputBar/OutputBar';\n\nclass App extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tans: 0,\n\t\t}\n\t\t\n\t\tthis.changeAns = this.changeAns.bind(this);\n\t}\n\t\n\tchangeAns(ans){\n\t\tthis.setState({ans: ans});\n\t}\n\t\n\trender(){\n\t\t  return (\n\t\t<div className=\"App\">\n\t\t  <header className=\"App-header\" >\n\t\t\t<h1>Введите числа через запятую и нажмите кнопку для определения суммы двух наименьших чисел из введенного набора</h1>\n\t\t\t<InputBar changeAns={this.changeAns} />\n\t\t\t<OutputBar ans={this.state.ans}/>\n\t\t  </header>\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}